#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";
;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

(slice, int, cell, cell, cell, int) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref(),  ;; royalty_params
     ds~load_uint(64) ;; minting_fee
     );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, int minting_price) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .store_uint(minting_price, 64)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int total_coins, cell nft_content, slice sender_address, slice receiver_address
) impure {
    var (owner_address, next_item_index, content, nft_item_code, royalty_params, minting_price) = load_data();

    ;; Ensure the minting price is covered if the sender is not the owner
    if (equal_slices(owner_address, sender_address) != true) {
        throw_unless(403, total_coins >= minting_price);
    }

    ;; Separate the minting fee and the remaining coins for the NFT storage
    int remaining_coins = total_coins;
    if (total_coins >= minting_price) {
        remaining_coins = total_coins - minting_price;
    }

    ;; Deploy the NFT with the remaining coins
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
              .store_uint(0x18, 6)
              .store_slice(nft_address)
              .store_coins(remaining_coins)
              .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
              .store_ref(state_init)
              .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; Pay transfer fees separately, revert on errors

    ;; Transfer the minting fee to the owner, if any
    if (total_coins >= minting_price){
        int share = 0;
        if (equal_slices(owner_address, receiver_address) != true) {
          share = (minting_price * 10) / 100;
        }
        var fee_msg = begin_cell()
                      .store_uint(0x18, 6) ;; bounce message
                      .store_slice(owner_address)
                      .store_coins(minting_price - share)
                      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers
                      .end_cell();
        send_raw_message(fee_msg, 1);
        if (equal_slices(owner_address, receiver_address) != true) {
          var share_fee_msg = begin_cell()
                      .store_uint(0x18, 6) ;; bounce message
                      .store_slice(receiver_address)
                      .store_coins(share)
                      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers
                      .end_cell();
          send_raw_message(share_fee_msg, 1);
        }
    }
}


() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, minting_price) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    ;;modification - anybody can deploy
    if (op == 1) { ;; deploy new nft
      int item_index = in_msg_body~load_uint(64);
      throw_unless(402, item_index <= next_item_index);

      ;; Extract the total amount of coins from the message
      int total_coins = in_msg_body~load_coins();

      ;; Extract the nft_content
      cell nft_content = in_msg_body~load_ref();

      ;; Check if the item_index is the last one
      var is_last = item_index == next_item_index;

      ;; Call deploy_nft_item with the appropriate separation of mint_fee and amount
      slice receiver_address = in_msg_body~load_msg_addr();
      deploy_nft_item(item_index, nft_item_code, total_coins, nft_content, sender_address, receiver_address);

      if (is_last) {
          next_item_index += 1;
          save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, minting_price);
      }
      return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 3) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, minting_price);
      return ();
    }

    if (op == 4) { ;; change content and royalty params
      save_data(owner_address, next_item_index, in_msg_body~load_ref(), nft_item_code, in_msg_body~load_ref(), minting_price);
      return ();
    }
    ;; Allow owner to update minting price
    if (op == 5) { ;; Change minting price
      int new_minting_price = in_msg_body~load_uint(64);
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, new_minting_price);
      return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty, _) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

int get_minting_price() method_id {
    var (_, _, _, _, _, minting_price) = load_data();
    return minting_price;
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, content, _, _, _) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}